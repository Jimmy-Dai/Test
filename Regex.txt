创建正则表达式:
	x:任意合法字符
	\0mnn:八进制
	\xhh:十六进制
	\uhhhh:十六进制的Unicode字符
	\t:制表符'\u0009'
	\n:换行'\u000A'
	\r:回车'\u000D'
	\f:换页符'\u000C'
	\a:报警bell符'\u0007'
	\e:Escape符'\u001B'
	\cx:x控制符，x为A~Z或a~z，如\cM->Ctrl-M

特殊字符:
	$:一行的结尾
	^:一行的开头
	():标记子表达式的开始和结束的位置
	[]:确定中括号表达式的开始和结束位置
	{}:用于标记前面子表达式出现的频率
	*:子表达式出现零次或多次
	+:子表达式出现一次或多次
	?:子表达式出现零次或一次
	.:匹配除\n之外任何字符
	\:用于转义下一字符，或指定八进制、十六进制
	|:指定两项之中选一项，(com|org|cn|net)

预定义字符：
	.:任何字符
	\d:0~9
	\D:非数字
	\s:所有空白字符，空格、制表、回车、换页、换行等
	\S:所有非空白字符
	\w:所有的单词字符，0~9、26字母和下划线
	\W:所有非单词字符
	
方括号表达式：
	枚举:[abc]、[de]
	范围-:[a-z]、[A-Z]
	求否^:[^abc]除abc任意字符
	与运算&&:[a-z&&[de]]、[a-z&&[^d-p]，即求交集
	并运算:[a-d[g-k]]、[a-dg-k]

边界匹配符:
	^:行的开头
	$:行的结尾
	\b:单词的边界
	\B:非单词的边界
	\A:输入的开头
	\G:前一个匹配的结尾
	\Z:输入的结尾，仅用于最后的结束符
	\z:输入的结尾

数量标识符：
	贪婪模式：一直匹配。
		X?:出现零次或一次
		X*:出现零次或多次
		X+:出现一次或多次
		X{n}:出现n次
		X{n,}:至少n次
		X{n,m}:至少n次，最多m次
	勉强模式：最小匹配。(?)
		X??:出现零次或一次
		X*?:出现零次或多次
		X+?:出现一次或多次
		X{n}?:出现n次
		X{n,}?:至少n次
		X{n,m}?:至少n次，最多m次
	占用模式：(+)

正则表达式的使用：
	多次：Pattern->Matcher->boolean
		Pattern p = Pattern.compile("regex");
		Matcher m = p.matcher("string");
			注 if(matcher == null){
				matcher = p.matcher(string);
				} else {
					matcher.reset(string);
				}
		boolean f = m.matches();
	一次：Pattern.matches(regex,string)->boolean
